import{_ as o,r as n,o as s,c as h,a,b as e,d as t,e as d}from"./app-f30de0ee.js";const l={},c=d('<p>继承是面向对象编程中的一个最为人津津乐道的概念，其描述了类与类之间的父子关系，主要作用是提升代码复用性让代码更为简洁。<br> 很多面向对象语言都支持两种继承：</p><ul><li>接口继承：只继承方法签名</li><li>实现继承：直接继承实际的方法 接口继承在 <code>ECMAScript</code> 中是不可能的，因为函数没有签名，因此实现继承是 <code>ECMAScript</code> 唯一支持的继承方式，而且其<strong>实现继承主要是依靠原型链来实现</strong>的。</li></ul><h2 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h2><h2 id="借用构造函数继承-经典继承" tabindex="-1"><a class="header-anchor" href="#借用构造函数继承-经典继承" aria-hidden="true">#</a> 借用构造函数继承（经典继承）</h2><h2 id="组合继承" tabindex="-1"><a class="header-anchor" href="#组合继承" aria-hidden="true">#</a> 组合继承</h2><h2 id="原型式继承" tabindex="-1"><a class="header-anchor" href="#原型式继承" aria-hidden="true">#</a> 原型式继承</h2><h2 id="寄生式继承" tabindex="-1"><a class="header-anchor" href="#寄生式继承" aria-hidden="true">#</a> 寄生式继承</h2><h2 id="寄生组合式继承" tabindex="-1"><a class="header-anchor" href="#寄生组合式继承" aria-hidden="true">#</a> 寄生组合式继承</h2><h2 id="es6-类继承-extends" tabindex="-1"><a class="header-anchor" href="#es6-类继承-extends" aria-hidden="true">#</a> ES6 类继承 extends</h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>原型链继承：通过重写子类的原型<strong>将父类的实例作为子类的原型</strong></li><li>借用构造函数继承：<strong>使用父类的构造函数来增强子类实例</strong>等同于复制父类的实例给子类（不使用原型）</li><li>组合继承：<strong>使用原型链继承原型上的属性和方法，通过借用构造函数来实现对实例属性的继承</strong></li><li>原型式继承：<strong>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型</strong></li><li>寄生式继承：<strong>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</strong></li><li>寄生组合式继承：<strong>通过借用构造函数继承属性，再使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型</strong></li></ul><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章" aria-hidden="true">#</a> 相关文章</h2>',12),g={href:"https://github.com/yygmind/blog/issues/7",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/mqyqingfeng/Blog/issues/16",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/mqyqingfeng/Blog/issues/106",target:"_blank",rel:"noopener noreferrer"};function f(b,p){const i=n("CustomBlock"),r=n("ExternalLinkIcon");return s(),h("div",null,[a(i,{title:"温馨提示",content:"<div>阅读<a href='https://www.ituring.com.cn/book/2472' target='_blank'>《JavaScript 高级程序设计（第 4 版）》</a>和各个大佬的文章所归纳的总结，<strong>如有异议按你的理解为主</strong></div>"}),c,e("ul",null,[e("li",null,[e("a",g,[t("JavaScript 常用八种继承方案"),a(r)])]),e("li",null,[e("a",u,[t("JavaScript 深入之继承的多种方式和优缺点"),a(r)])]),e("li",null,[e("a",_,[t("ES6 系列之 Babel 是如何编译 Class 的(下)"),a(r)])])])])}const x=o(l,[["render",f],["__file","inherit.html.vue"]]);export{x as default};
