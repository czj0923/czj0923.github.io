import{_ as c,r as p,o as i,c as l,a as s,b as n,d as e,e as o}from"./app-8cbcf23b.js";const u={},r=o('<p>继承是面向对象编程中的一个最为人津津乐道的概念，其描述了类与类之间的父子关系，主要作用是提升代码复用性让代码更为简洁。<br> 很多面向对象语言都支持两种继承：</p><ul><li>接口继承：只继承方法签名</li><li>实现继承：直接继承实际的方法 接口继承在 <code>ECMAScript</code> 中是不可能的，因为函数没有签名，因此实现继承是 <code>ECMAScript</code> 唯一支持的继承方式，而且其<strong>实现继承主要是依靠原型链来实现</strong>的。</li></ul><h2 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h2><p>构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想</p>',4),d=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token string">&#39;Super&#39;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// 关键点：创建父类 SuperType 的实例并将其赋值给子类的原型 SubType.prototype</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty
<span class="token punctuation">}</span>

<span class="token keyword">const</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;instance1&#39;</span><span class="token punctuation">,</span> instance1<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Super&#39;</span>
<span class="token comment">// 在其中一个子类实例上修改父类上的引用属性</span>
instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;instance2&#39;</span><span class="token punctuation">,</span> instance2<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Super&#39;</span>
<span class="token comment">// 在另一个子类实例上输出父类上的引用属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;instance2&#39;</span><span class="token punctuation">,</span> instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;black&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="借用构造函数继承-经典继承" tabindex="-1"><a class="header-anchor" href="#借用构造函数继承-经典继承" aria-hidden="true">#</a> 借用构造函数继承（经典继承）</h2><h2 id="组合继承" tabindex="-1"><a class="header-anchor" href="#组合继承" aria-hidden="true">#</a> 组合继承</h2><h2 id="原型式继承" tabindex="-1"><a class="header-anchor" href="#原型式继承" aria-hidden="true">#</a> 原型式继承</h2><h2 id="寄生式继承" tabindex="-1"><a class="header-anchor" href="#寄生式继承" aria-hidden="true">#</a> 寄生式继承</h2><h2 id="寄生组合式继承" tabindex="-1"><a class="header-anchor" href="#寄生组合式继承" aria-hidden="true">#</a> 寄生组合式继承</h2><h2 id="es6-类继承-extends" tabindex="-1"><a class="header-anchor" href="#es6-类继承-extends" aria-hidden="true">#</a> ES6 类继承 extends</h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>原型链继承：通过重写子类的原型<strong>将父类的实例作为子类的原型</strong></li><li>借用构造函数继承：<strong>使用父类的构造函数来增强子类实例</strong>等同于复制父类的实例给子类（不使用原型）</li><li>组合继承：<strong>使用原型链继承原型上的属性和方法，通过借用构造函数来实现对实例属性的继承</strong></li><li>原型式继承：<strong>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型</strong></li><li>寄生式继承：<strong>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</strong></li><li>寄生组合式继承：<strong>通过借用构造函数继承属性，再使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型</strong></li></ul><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章" aria-hidden="true">#</a> 相关文章</h2>`,10),k={href:"https://github.com/yygmind/blog/issues/7",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/mqyqingfeng/Blog/issues/16",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/mqyqingfeng/Blog/issues/106",target:"_blank",rel:"noopener noreferrer"};function b(m,g){const t=p("CustomBlock"),a=p("ExternalLinkIcon");return i(),l("div",null,[s(t,{title:"温馨提示",content:"<div>阅读<a href='https://www.ituring.com.cn/book/2472' target='_blank'>《JavaScript 高级程序设计（第 4 版）》</a>和各个大佬的文章所归纳的总结，<strong>如有异议按你的理解为主</strong></div>"}),r,s(t,{title:"原型链继承",content:"<div>原型链继承是通过重写子类的原型<strong>将父类的实例作为子类的原型</strong></div><div>缺点</div><ul><li>父类上的引用类型属性会被所有实例共享，其中一个实例进行修改时会影响其他实例</li><li>创建子类实例时不能向父类构造函数传参</li></ul>"}),d,n("ul",null,[n("li",null,[n("a",k,[e("JavaScript 常用八种继承方案"),s(a)])]),n("li",null,[n("a",h,[e("JavaScript 深入之继承的多种方式和优缺点"),s(a)])]),n("li",null,[n("a",v,[e("ES6 系列之 Babel 是如何编译 Class 的(下)"),s(a)])])])])}const y=c(u,[["render",b],["__file","inherit.html.vue"]]);export{y as default};
