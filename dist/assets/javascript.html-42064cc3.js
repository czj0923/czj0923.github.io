import{_ as i,o as l,c as r,e}from"./app-11db9fe7.js";const a={},o=e('<h2 id="js数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#js数据类型有哪些" aria-hidden="true">#</a> js数据类型有哪些</h2><p>string,number,boolea,null,undefined,symbol,bigint,object</p><h2 id="var-let-const的区别" tabindex="-1"><a class="header-anchor" href="#var-let-const的区别" aria-hidden="true">#</a> var,let,const的区别</h2><ul><li>let和const具有块级作用域</li><li>let和const没有变量提升，var存在变量提升</li><li>var声明的全局变量会绑定到window上</li><li>var可以重复声明，let和const不允许重复声明</li><li>let和const存在暂时性死区</li><li>const声明的基本数据类型不能修改</li></ul><h2 id="箭头函数和普通函数的区别" tabindex="-1"><a class="header-anchor" href="#箭头函数和普通函数的区别" aria-hidden="true">#</a> 箭头函数和普通函数的区别</h2><ul><li>箭头函数没有自己的this</li><li>bind,call,apply不能改变箭头函数的this指向</li><li>箭头函数不能作为构造函数</li><li>箭头函数没有arguments</li><li>箭头函数没有prototype</li></ul><h2 id="for-in和for-of的区别" tabindex="-1"><a class="header-anchor" href="#for-in和for-of的区别" aria-hidden="true">#</a> for in和for of的区别</h2><ul><li>for in遍历的是键，for of遍历的是值</li><li>for in会遍历原型链上的属性，for of只会遍历自身</li><li>for in可以遍历对象，for of不能遍历对象，因为对象没有迭代器属性</li><li>for in是es5的，for of是es6新增的</li></ul><h2 id="如何把类数组转为数组" tabindex="-1"><a class="header-anchor" href="#如何把类数组转为数组" aria-hidden="true">#</a> 如何把类数组转为数组</h2><ol><li>Array.from()</li><li>扩展运算符（需要有迭代器对象）</li><li>Array.prototype.slice()</li><li>Array.prototype.splice()</li><li>Array.prototype.concat()</li></ol>',10),t=[o];function n(s,c){return l(),r("div",null,t)}const d=i(a,[["render",n],["__file","javascript.html.vue"]]);export{d as default};
