import{_ as e,o as a,c as i,e as t}from"./app-a9bf0872.js";const r={},d=t('<h2 id="vue2生命周期" tabindex="-1"><a class="header-anchor" href="#vue2生命周期" aria-hidden="true">#</a> vue2生命周期</h2><ul><li>beforeCreate</li><li>created 实例创建完成</li><li>beforeMount</li><li>mounted 实例挂载完成</li><li>beforeUpdate</li><li>updated</li><li>brforeDestroy</li><li>destroyed</li></ul><h2 id="一般在哪个生命周期发请求" tabindex="-1"><a class="header-anchor" href="#一般在哪个生命周期发请求" aria-hidden="true">#</a> 一般在哪个生命周期发请求</h2><p>created,beforeMount,mounted都可以 推荐在created发，因为可以更快的获取数据，减少页面加载事件 ssr不支持beforeMount,mounted钩子，放在 created 中有助于一致性</p><h2 id="vue2和vue3区别" tabindex="-1"><a class="header-anchor" href="#vue2和vue3区别" aria-hidden="true">#</a> vue2和vue3区别</h2><ul><li>响应式原理vue2使用的是Object.defineProperty,vue3使用的是es6的proxy</li><li>生命周期，vue3使用setup代替vue2的beforeCreate和created</li><li>vue3使用composition API代替了vue2的options API，更好地逻辑复用</li><li>定义响应式数据，vue3引入ref和reactive来声明响应式数据</li><li>fragments vue3的template下支持多个根节点</li><li>新增内置组件suspense，teleport，将一部分dom移动到外部</li><li>更好的typescript支持</li></ul><h2 id="proxy相比于object-defineproperty的优点" tabindex="-1"><a class="header-anchor" href="#proxy相比于object-defineproperty的优点" aria-hidden="true">#</a> proxy相比于Object.defineProperty的优点</h2><ul><li>proxy有13种拦截方法，相比于Object.defineProperty的get和set更加丰富</li><li>proxy直接代理整个对象</li><li>proxy可以监听数组的变化</li></ul><h2 id="vue2如何实现对于数组的监听" tabindex="-1"><a class="header-anchor" href="#vue2如何实现对于数组的监听" aria-hidden="true">#</a> vue2如何实现对于数组的监听</h2><p>重写了数组上的7个方法，pop,push,shift,unshift,splice,sort,reverse</p><h2 id="nexttick的原理和作用" tabindex="-1"><a class="header-anchor" href="#nexttick的原理和作用" aria-hidden="true">#</a> $nextTick的原理和作用</h2><p>$nextTick是在下次dom更新循环结束之后执行延迟回调，在修改数据之后使用$nextTick获取更新后的dom 根据不同的环境依次尝试使用Promise、MutationObserver、setImmediate，如果这三个都不能用，则使用效率最低但兼容性最好的setTimeout来创建一个异步任务。</p><h2 id="组件之间的通信方式" tabindex="-1"><a class="header-anchor" href="#组件之间的通信方式" aria-hidden="true">#</a> 组件之间的通信方式</h2><ul><li>父传子props</li><li>子传父$emit</li><li>vuex状态管理</li><li>全局事件总线</li><li>provide,inject</li><li>$refs获取组件实例</li><li>$attrs和$listeners</li><li>$children和$parent</li></ul><h2 id="key的作用" tabindex="-1"><a class="header-anchor" href="#key的作用" aria-hidden="true">#</a> key的作用</h2><ul><li>为了在diff算法执行过程中更快地找到对应节点，提高diff速度，更高效地更新虚拟dom</li><li>为了在数据发生变化时强制更新组件，避免“就地复用”带来的副作用</li></ul><h2 id="组件当中data为什么是函数" tabindex="-1"><a class="header-anchor" href="#组件当中data为什么是函数" aria-hidden="true">#</a> 组件当中data为什么是函数</h2><p>一个组件被复用多次的话，会生成多个实例，这些实例用的是同一个构造函数， 如果data是一个对象，因为对象是引用类型，修改一个组件中的data会影响到其他组件中的data， 为了不同组件的data不会相互影响所以要用函数</p><h2 id="v-model的原理" tabindex="-1"><a class="header-anchor" href="#v-model的原理" aria-hidden="true">#</a> v-model的原理</h2><p>v-model本质是一个语法糖，实现双向数据绑定，数据修改影响视图使用的是Object.defineProperty劫持了数据的getter和setter，一旦数据发生改变，就会通知视图更新；视图的修改影响数据使用的是监听输入框的input事件</p><h2 id="computed和watch区别" tabindex="-1"><a class="header-anchor" href="#computed和watch区别" aria-hidden="true">#</a> computed和watch区别</h2><p>computed是计算属性，具有缓存的特性，只有当它所依赖的数据发生变化才会重新进行计算 watch是侦听器，只要他侦听的数据发生改变，就会立即执行函数</p><h2 id="父子组件的加载顺序" tabindex="-1"><a class="header-anchor" href="#父子组件的加载顺序" aria-hidden="true">#</a> 父子组件的加载顺序</h2><p>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted</p><h2 id="单项数据流是什么" tabindex="-1"><a class="header-anchor" href="#单项数据流是什么" aria-hidden="true">#</a> 单项数据流是什么</h2><p>父组件的数据发生改变，子组件会自动跟着变 子组件不能修改父组件传过来的props值</p><hr><h2 id="vue-router导航守卫有哪些" tabindex="-1"><a class="header-anchor" href="#vue-router导航守卫有哪些" aria-hidden="true">#</a> vue-router导航守卫有哪些</h2><ul><li>全局导航守卫 beforeEach,beforeResolve,afterEach</li><li>组件内部守卫 beforeRouteEnter,beforeRouteUpdate,beforeRouteLeave</li><li>路由独享守卫 beforeEnter</li></ul><h2 id="hash模式和history模式是怎么实现的" tabindex="-1"><a class="header-anchor" href="#hash模式和history模式是怎么实现的" aria-hidden="true">#</a> hash模式和history模式是怎么实现的</h2><ul><li>hash模式利用的是onhashchange事件</li><li>history模式使用的是html5中的pushState()和replaceState()方法</li></ul><hr><h2 id="vuex的中mutation和action的区别" tabindex="-1"><a class="header-anchor" href="#vuex的中mutation和action的区别" aria-hidden="true">#</a> vuex的中mutation和action的区别</h2><p>mutation处理同步操作，使用时用commit action用于处理异步操作，使用时先用dispatch到action，然后commit到mutation中进行状态更改</p><h2 id="为什么-vuex-的-mutation-中不能做异步操作" tabindex="-1"><a class="header-anchor" href="#为什么-vuex-的-mutation-中不能做异步操作" aria-hidden="true">#</a> 为什么 Vuex 的 mutation 中不能做异步操作</h2><p>因为vuex中的状态只能用mutation来更新，每个mutation执行完之后都会对应到一个新的状态变更，devtools就可以打个快照存下来，方便后面调试</p><hr><h2 id="虚拟dom是什么" tabindex="-1"><a class="header-anchor" href="#虚拟dom是什么" aria-hidden="true">#</a> 虚拟dom是什么</h2><p>虚拟dom是对真实dom的抽象，本质上是一个普通js对象</p><h2 id="虚拟dom的优点" tabindex="-1"><a class="header-anchor" href="#虚拟dom的优点" aria-hidden="true">#</a> 虚拟dom的优点</h2><ul><li>频繁地操作dom是很消耗性能的，虚拟dom可以运用diff算法最大限度地减少dom操作和以及dom操作带来的重排和重绘损耗，从而提高性能</li><li>虚拟dom本质上是js对象，不依赖客户端环境，具有跨平台的优势</li></ul>',41),h=[d];function o(l,n){return a(),i("div",null,h)}const c=e(r,[["render",o],["__file","vue.html.vue"]]);export{c as default};
